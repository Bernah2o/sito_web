#!/usr/bin/env python3
"""
Aplicaci√≥n principal de DH2OCOL
Sistema web profesional para gesti√≥n de servicios de tanques de agua
"""

import os
import pymysql
from datetime import datetime
from flask import Flask, g
from flask_mail import Mail
from dotenv import load_dotenv
from config import config

# Cargar variables de entorno
load_dotenv()

# Inicializar Flask-Mail
mail = Mail()

def create_app(config_name='development'):
    """Factory para crear la aplicaci√≥n Flask"""
    # Asegurar que las variables de entorno est√©n cargadas
    load_dotenv()
    
    app = Flask(__name__)
    
    # Cargar configuraci√≥n
    app.config.from_object(config[config_name])
    
    # Inicializar Flask-Mail
    mail.init_app(app)
    
    # Configurar base de datos
    init_db_connection(app)
    
    # Registrar Blueprints
    from blueprints.main import main_bp
    from blueprints.admin import admin_bp
    
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp, url_prefix='/admin')
    
    # Health check endpoint para Docker
    @app.route('/health')
    def health_check():
        """Endpoint de verificaci√≥n de salud para Docker"""
        try:
            # Health check b√°sico sin dependencia de base de datos
            return {
                'status': 'healthy',
                'timestamp': datetime.now().isoformat(),
                'version': '1.0.0'
            }, 200
        except Exception as e:
            return {
                'status': 'error',
                'timestamp': datetime.now().isoformat(),
                'error': str(e)
            }, 500
    
    # Endpoint separado para verificar base de datos
    @app.route('/health/db')
    def health_check_db():
        """Endpoint de verificaci√≥n de salud de la base de datos"""
        try:
            # Verificar conexi√≥n a base de datos usando la funci√≥n del app
            db = app.get_db()
            cursor = db.cursor()
            cursor.execute("SELECT 1")
            cursor.close()
            
            return {
                'status': 'healthy',
                'timestamp': datetime.now().isoformat(),
                'database': 'connected',
                'version': '1.0.0'
            }, 200
        except Exception as e:
            return {
                'status': 'unhealthy',
                'timestamp': datetime.now().isoformat(),
                'error': str(e)
            }, 503
    
    # Crear directorio de uploads si no existe
    upload_dir = os.path.join(app.root_path, app.config['UPLOAD_FOLDER'])
    os.makedirs(upload_dir, exist_ok=True)
    
    return app

def init_db_connection(app):
    """Inicializar conexi√≥n a base de datos"""
    
    def get_db():
        """Obtener conexi√≥n a la base de datos"""
        if 'db' not in g:
            g.db = pymysql.connect(
                host=app.config['DB_HOST'],
                user=app.config['DB_USER'],
                password=app.config['DB_PASSWORD'],
                database=app.config['DB_NAME'],
                charset='utf8mb4',
                cursorclass=pymysql.cursors.DictCursor
            )
        return g.db
    
    def close_db(error):
        """Cerrar conexi√≥n a la base de datos"""
        db = g.pop('db', None)
        if db is not None:
            db.close()
    
    # Registrar funciones en el contexto de la aplicaci√≥n
    app.teardown_appcontext(close_db)
    
    # Hacer get_db disponible globalmente
    app.get_db = get_db

# Crear instancia de la aplicaci√≥n para Gunicorn
# Determinar entorno para producci√≥n
env = os.environ.get('FLASK_ENV', 'production')
app = create_app(env)

def main():
    """Funci√≥n principal para ejecutar la aplicaci√≥n"""
    # Determinar entorno
    env = os.environ.get('FLASK_ENV', 'development')
    
    # Crear aplicaci√≥n
    local_app = create_app(env)
    
    # Solo mostrar informaci√≥n detallada en desarrollo
    if env == 'development':
        print("üöÄ Iniciando DH2OCOL...")
        print("=" * 50)
        print(f"üåê Entorno: {env}")
        print(f"üìä Base de datos: MySQL")
        print(f"üîß Debug: {local_app.config['DEBUG']}")
        print("=" * 50)
        print("üìã URLs disponibles:")
        print("   ‚Ä¢ Sitio web: http://localhost:5000")
        print("   ‚Ä¢ Panel admin: http://localhost:5000/admin")
        print("   ‚Ä¢ Credenciales: admin / admin123")
        print("=" * 50)
    else:
        # En producci√≥n, solo un mensaje simple
        print(f"üöÄ DH2OCOL iniciado en modo {env}")
    
    # Ejecutar aplicaci√≥n
    local_app.run(
        debug=local_app.config['DEBUG'],
        host='0.0.0.0',
        port=5000
    )

if __name__ == '__main__':
    main()